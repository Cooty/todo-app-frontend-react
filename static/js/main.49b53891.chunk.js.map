{"version":3,"sources":["components/ToDoList/styles/variables.ts","components/ToDoList/Text.tsx","components/ToDoList/List.tsx","styles/variables.ts","styles/mixins.ts","components/ToDoList/ListItem.tsx","components/ToDoList/CloseButton.tsx","components/ToDoList/CustomCheckbox.tsx","components/ToDoList/ToDoList.tsx","components/AddToDo/Form.tsx","components/AddToDo/Label.ts","components/AddToDo/Button.tsx","components/AddToDo/Input.tsx","components/AddToDo/AddToDo.tsx","components/AppWrapper.tsx","components/Header.tsx","App.tsx","index.tsx"],"names":["vGutter","transition","Text","styled","span","props","isDone","List","ul","ListItem","li","closeButtonSize","innerBorder","CloseButton","button","CustomCheckbox","label","ToDoList","items","map","todo","type","onChange","onToggleDone","id","text","onClick","onDeleteTodo","Form","form","Label","Button","Input","input","AddToDo","useState","toDoText","setToDoText","onSubmit","e","preventDefault","onAddToDo","htmlFor","autoFocus","autoCorrect","autoCapitalize","autoComplete","placeholder","value","target","disabled","length","AppWrapper","div","Header","h1","App","todos","setTodos","prevTodos","Date","now","toString","Fragment","filter","ReactDOM","render","document","getElementById"],"mappings":"sPAEaA,EAAU,MACVC,EAAa,sBCOXC,EAPFC,IAAOC,KAAV,qHDFgB,ICMpB,SAACC,GAAD,OAA8BA,EAAMC,OAAS,gCAAkC,MCStEC,EAXFJ,IAAOK,GAAV,uLAGSR,EACGA,ECTW,MCQd,4SARI,6HCoBRS,EAjBEN,IAAOO,GAAV,8WAMQV,EACDW,GACAX,GCRRY,EAAc,oCA8BZC,EA5BKV,IAAOW,OAAV,+iBNLc,MMkBbF,EAEAX,EAQIW,GCiBPG,EA1CQZ,IAAOa,MAAV,o0BPHW,MOgCTf,G,OCOPgB,EAzBqB,SAACZ,GACjC,OACI,cAAC,EAAD,UACKA,EAAMa,MAAMC,KAAI,SAAAC,GACb,OACI,eAAC,EAAD,WACI,eAAC,EAAD,WACI,uBAAOC,KAAK,WAAWC,SAAU,WAAOjB,EAAMkB,aAAaH,EAAKI,OAChE,6CAEJ,cAAC,EAAD,CAAMlB,OAAQc,EAAKd,OAAnB,SACKc,EAAKK,OAEV,cAAC,EAAD,CAAaJ,KAAK,SACCK,QAAS,WAAMrB,EAAMsB,aAAaP,EAAKI,KAD1D,oBARWJ,EAAKI,UCLzBI,EAVFzB,IAAO0B,KAAV,+JNJuB,MCQd,4SARI,6HMYRC,EAVD3B,IAAOa,MAAV,6LC4BIe,EA3BA5B,IAAOW,OAAV,mzBPiBoB,4MQAjBkB,EAjBD7B,IAAO8B,MAAV,0URiBqB,4MSqBjBC,EA/ByB,SAAC7B,GACrC,MAAgC8B,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAUA,OACI,eAAC,EAAD,CAAMC,SATY,SAACC,GACnBA,EAAEC,iBACCJ,IACC/B,EAAMoC,UAAUL,GAChBC,EAAY,MAKhB,UACI,cAAC,EAAD,CAAOK,QAAQ,YAAf,+BACA,cAAC,EAAD,CAAOrB,KAAK,OACLG,GAAG,YACHmB,WAAS,EACTC,YAAY,MACZC,eAAe,MACfC,aAAa,MACbC,YAAY,6BACZC,MAAOZ,EACPd,SAAU,SAACiB,GAAD,OAAOF,EAAYE,EAAEU,OAAOD,UAE7C,cAAC,EAAD,CAAQ3B,KAAK,SAAS6B,UAAWd,EAASe,OAA1C,2BCxBGC,EARIjD,IAAOkD,IAAV,kICQDC,EAPAnD,IAAOoD,GAAV,mGXHW,6HY2DRC,EApDO,WACpB,MAA0BrB,mBAAiB,IAA3C,mBAAOsB,EAAP,KAAcC,EAAd,KA+BA,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CAASjB,UA/BU,SAAChB,GACtBiC,GAAS,SAACC,GAAD,4BACJA,GADI,CAEP,CAACnC,GAAIoC,KAAKC,MAAMC,WAAYrC,KAAMA,EAAMnB,QAAQ,WA8B9CmD,EAAMN,OACJ,eAAC,IAAMY,SAAP,WACE,cAAC,EAAD,4BAGA,cAAC,EAAD,CAAU7C,MAAOuC,EACP9B,aAhCM,SAACH,GACzBkC,GAAS,SAACC,GACR,OAAOA,EAAUK,QAAO,SAAA5C,GAAI,OAAIA,EAAKI,KAAOA,SA+B5BD,aA3BD,SAACC,GAClBkC,GAAS,SAACC,GACR,OAAOA,EAAUxC,KAAI,SAAAC,GACnB,OAAGA,EAAKI,KAAOA,EACNJ,EAGF,CACLI,GAAIJ,EAAKI,GACTC,KAAML,EAAKK,KACXnB,QAASc,EAAKd,oBAoBZ,SChDZ2D,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.49b53891.chunk.js","sourcesContent":["export const closeButtonSize = 24;\nexport const textGutter = 10;\nexport const vGutter = '2vh';\nexport const transition = 'all .3s ease-in-out';","import styled from '@emotion/styled';\nimport { textGutter } from \"./styles/variables\";\n\nconst Text = styled.span`\n    display: inline-block;\n    font-size: 1.6rem;\n    padding: 5px 0 0 ${textGutter}px;\n    ${(props: {isDone: boolean}) => props.isDone ? 'text-decoration: line-through' : '' }\n`;\n\nexport default Text;","import styled from '@emotion/styled';\nimport {vGutterFromScreen} from \"../../styles/variables\";\nimport {box, wrapper} from \"../../styles/mixins\";\nimport {vGutter} from \"./styles/variables\";\n\nconst List = styled.ul`\n    flex-direction: column;\n    flex: 1;\n    padding-top: ${vGutter};\n    padding-bottom: ${vGutter};\n    margin-bottom: ${vGutterFromScreen};\n    overflow: auto;\n    ${box()}\n    ${wrapper()}\n`;\n\nexport default List;","export const vGutterFromScreen = '4vh';","export const wrapper = () => `\n    max-width: 640px;\n    width: 100%;\n    align-self: center;\n    margin-left: 1.6rem;\n    margin-right: 1.6rem;\n`; \n\nexport const box = () => `\n    display: flex;\n    background: #fff;\n    padding-left: 3vw;\n    padding-right: 3vw;\n    border-radius: 1.6rem;\n    box-shadow: 1px 1px 4px rgb(116 128 148 / 2%), \n    0px 1px 2px rgb(116 128 148 / 4%), \n    0px 0px 4px rgb(116 128 148 / 8%), \n    0px 0px 4px rgb(116 128 148 / 8%);\n`;\n\nexport const formElementsBase = () => `\n    padding: 0.6rem 1.6rem;\n    display: inline-block;\n    font-family: inherit;\n    border-radius: 0.4rem;\n    transition: all 0.3s ease-in-out;\n\n    &:focus {\n        outline: 0;\n    }\n\n`;","import styled from '@emotion/styled';\nimport { vGutter, textGutter, closeButtonSize } from \"./styles/variables\";\n\nconst ListItem = styled.li`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    position: relative;\n    border-bottom: 1px solid rgba(0, 0, 0, .2);\n    padding-bottom: ${vGutter};\n    padding-right: ${closeButtonSize + textGutter}px;\n    margin-bottom: ${vGutter};\n    \n    &:last-of-type {\n        margin-bottom: 0;\n        border-bottom: 0;\n        padding-bottom: 0;\n    }\n`;\n\nexport default ListItem;","import styled from '@emotion/styled';\nimport { closeButtonSize, transition } from \"./styles/variables\";\n\nexport const innerBorder = '0 0 0 1px rgba(0, 0, 0, .4) inset';\n\nconst CloseButton = styled.button`\n    position: absolute;\n    right: 0;\n    border: 0;\n    padding: 0;\n    width: ${closeButtonSize}px;\n    height: ${closeButtonSize}px;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    color: #F9EBEA;\n    background-color: #B03A2E;\n    border-radius: 100%;\n    box-shadow: ${innerBorder};\n    cursor: pointer;\n    transition: ${transition};\n    line-height: 1;\n    font-size: 16px;\n    font-weight: bold;\n    \n    &:focus,\n    &:hover {\n        outline: 0;\n        box-shadow: ${innerBorder}, 0 0 6px rgb(146, 43, 33, .6);\n    }\n    \n`;\n\nexport default CloseButton;","import styled from '@emotion/styled';\nimport {closeButtonSize, transition} from \"./styles/variables\";\n\nconst CustomCheckbox = styled.label`\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    width: ${closeButtonSize}px;\n    height: ${closeButtonSize}px;\n    border: 1px solid rgb(144, 148, 151);\n    background: rgb(202, 207, 210);\n    border-radius: .4rem;\n    position: relative;\n    \n    &,\n    > * {\n        cursor: pointer;\n    }\n    \n    > input[type=\"checkbox\"] {\n        opacity: 0;\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        padding: 0;\n    }\n    \n    > span {\n        color: #239B56;\n        font-size: 20px;\n        transition: ${transition};\n        transform-origin: center;\n        opacity: 0;\n        transform: scale(0);\n    }\n    \n    > input[type=\"checkbox\"]:checked + span {\n        opacity: 1;\n        transform: scale(1);\n    }\n    \n`;\n\nexport default CustomCheckbox;","import {FC} from 'react';\nimport ToDo from \"../../ToDo.model\";\nimport Text from \"./Text\";\nimport List from \"./List\";\nimport ListItem from \"./ListItem\";\nimport CloseButton from \"./CloseButton\";\nimport CustomCheckbox from \"./CustomCheckbox\";\n\ninterface ToDoListProps {\n    items: ToDo[],\n    onDeleteTodo: (id: string) => void,\n    onToggleDone: (id: string) => void,\n}\n\nconst ToDoList: FC<ToDoListProps> = (props) => {\n    return (\n        <List>\n            {props.items.map(todo => {\n                return (\n                    <ListItem key={todo.id}>\n                        <CustomCheckbox>\n                            <input type=\"checkbox\" onChange={() => {props.onToggleDone(todo.id)}} />\n                            <span>✔</span>\n                        </CustomCheckbox>\n                        <Text isDone={todo.isDone}>\n                            {todo.text}\n                        </Text>\n                        <CloseButton type=\"button\"\n                                           onClick={()=> {props.onDeleteTodo(todo.id)}}\n                        >\n                            ×\n                        </CloseButton>\n                    </ListItem>\n                )\n            })}\n        </List>\n    );\n};\n\nexport default ToDoList;","import styled from '@emotion/styled';\nimport { box, wrapper } from '../../styles/mixins';\nimport {vGutterFromScreen} from \"../../styles/variables\";\n\nconst Form = styled.form`\n    margin-top: ${vGutterFromScreen};\n    padding-top: 6vh;\n    padding-bottom: 6vh;\n    flex-wrap: wrap;\n    flex: 0 0 auto;\n    ${box()}\n    ${wrapper()}\n`;\n\nexport default Form;","import styled from '@emotion/styled';\n\nconst Label = styled.label`\n    flex-basis: 100%;\n    flex-shrink: 0;\n    margin-bottom: 0.4rem;\n    font-weight: bold;\n    display: block;\n    font-size: 2rem;\n    cursor: pointer;\n`;\n\nexport default Label;","import styled from '@emotion/styled';\nimport { formElementsBase } from '../../styles/mixins';\n\nconst Button = styled.button`\n    ${formElementsBase()}\n    font-weight: bold;\n    height: 4.8rem;\n    flex: 0 0 auto;\n    color: #fff;\n    cursor: pointer;\n    text-shadow: 1px 1px rgba(0, 0, 0, 0.2);\n    background: rgb(125,60,152);\n    background: linear-gradient(0deg, rgba(125,60,152,1) 0%, rgba(165,105,189,1) 100%);\n    border: 0;\n\n    &:not([disabled]):hover,\n    &:not([disabled]):focus {\n        text-shadow: -1px -1px rgba(0, 0, 0, 0.2);\n        background: rgba(165, 105, 189, 1);\n        background: linear-gradient(0deg, rgba(165, 105, 189, 1) 0%, rgba(125, 60, 152, 1) 100%);\n    }\n\n    &[disabled] {\n        opacity: 0.5;\n        cursor: not-allowed;\n        background: rgba(202, 207, 210, 1);\n        background: linear-gradient(0deg, rgba(144, 148, 151, 1) 0%, rgba(202, 207, 210, 1) 100%);\n    }\n`;\n\nexport default Button;","import styled from '@emotion/styled';\nimport { formElementsBase } from '../../styles/mixins';\n\nconst Input = styled.input`\n    ${formElementsBase()}\n    flex: 1;\n    margin-right: 1.6rem;\n    background: #fff;\n    color: inherit;\n    border: 2px solid rgba(165, 105, 189, 1);\n    font-size: 1.8rem;\n\n    &:hover,\n    &:focus {\n        border-color: rgb(125, 60, 152);\n        box-shadow: 0 0 0.4rem rgba(165, 105, 189, 1);\n    }\n\n`;\n\nexport default Input;","import React, { useState } from 'react';\nimport Form from \"./Form\";\nimport Label from \"./Label\";\nimport Button from \"./Button\";\nimport Input from \"./Input\";\n\ninterface AddToDoProps {\n    onAddToDo: (text: string) => void\n}\n\nconst AddToDo: React.FC<AddToDoProps> = (props) => {\n    const [toDoText, setToDoText] = useState('');\n\n    const submitHandler = (e: React.FormEvent) => {\n        e.preventDefault();\n        if(toDoText) {\n            props.onAddToDo(toDoText);\n            setToDoText('');\n        }\n    }\n\n    return (\n        <Form onSubmit={submitHandler}>\n            <Label htmlFor=\"todo-text\">Add some new task</Label>\n            <Input type=\"text\"\n                   id=\"todo-text\" \n                   autoFocus\n                   autoCorrect=\"off\"\n                   autoCapitalize=\"off\"\n                   autoComplete=\"off\"\n                   placeholder=\"Start typing to add a ToDo\"\n                   value={toDoText}\n                   onChange={(e) => setToDoText(e.target.value)}\n            />\n            <Button type=\"submit\" disabled={!toDoText.length}>\n                Add ToDo!\n            </Button>\n        </Form>\n    );\n}\n\nexport default AddToDo;","import styled from \"@emotion/styled\";\n\nconst AppWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  background: #F2F4F4;\n`;\n\nexport default AppWrapper;","import styled from \"@emotion/styled\";\nimport {wrapper} from \"../styles/mixins\";\n\nconst Header = styled.h1`\n  font-size: 2.6rem;\n  margin: 4vh 0 2vh 0;\n  flex: 0 0 auto;\n  ${wrapper()}\n`;\n\nexport default Header;","import React, { useState } from 'react';\nimport ToDoList from './components/ToDoList/ToDoList';\nimport AddToDo from './components/AddToDo/AddToDo';\nimport ToDo from './ToDo.model';\nimport AppWrapper from \"./components/AppWrapper\";\nimport Header from \"./components/Header\";\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<ToDo[]>([]);\n\n  const addToDoHandler = (text: string) => {\n    setTodos((prevTodos: ToDo[]): ToDo[] => [\n      ...prevTodos, \n      {id: Date.now().toString(), text: text, isDone: false}\n    ]);\n  };\n\n  const deleteToDoHandler = (id: string) => {\n    setTodos((prevTodos: ToDo[]): ToDo[] => {\n      return prevTodos.filter(todo => todo.id !== id);\n    })\n  }\n\n  const toggleDone = (id: string) => {\n    setTodos((prevTodos: ToDo[]): ToDo[] => {\n      return prevTodos.map(todo => {\n        if(todo.id !== id) {\n          return todo;\n        }\n\n        return {\n          id: todo.id,\n          text: todo.text,\n          isDone: !todo.isDone\n        };\n      });\n    });\n  }\n\n  return (\n    <AppWrapper>\n      <AddToDo onAddToDo={addToDoHandler} />\n      {\n        todos.length ? (\n          <React.Fragment>\n            <Header>\n              Things to do:\n            </Header>\n            <ToDoList items={todos} \n                      onDeleteTodo={deleteToDoHandler}\n                      onToggleDone={toggleDone}\n            />\n          </React.Fragment>\n        ) : null\n      }\n    </AppWrapper>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/global.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}