{"version":3,"sources":["components/ToDoList/styles/variables.ts","components/ToDoList/Text.tsx","styles/variables.ts","styles/mixins.ts","components/ToDoList/List.tsx","components/ToDoList/ListItem.tsx","components/ToDoList/CloseButton.tsx","components/ToDoList/CustomCheckbox.tsx","components/CrossIcon.tsx","components/ToDoList/ToDoList.tsx","components/AddToDo/Form.tsx","components/AddToDo/Label.ts","components/AddToDo/Button.tsx","components/AddToDo/Input.tsx","components/AddToDo/InputWrapper.tsx","components/AddToDo/ButtonWrapper.tsx","store/context.ts","components/AddToDo/AddToDo.tsx","components/AppWrapper.tsx","components/Header.tsx","utils/count-open-todos.ts","App.tsx","store/reducer.ts","store/Provider.tsx","index.tsx"],"names":["transition","Text","styled","span","props","isDone","formHeight","boxPadding","breakpoints","box","List","ul","parseInt","ListItem","li","closeButtonSize","innerBorder","CloseButton","button","CustomCheckbox","label","CrossIcon","size","StyledCrossIcon","i","rotated","ToDoList","items","map","todo","type","onChange","onToggleDone","id","text","onClick","onDeleteTodo","Form","form","Label","Button","Input","input","InputWrapper","div","offset","ButtonWrapper","createContext","todos","add","item","delete","toggle","AddToDo","useState","toDoText","setToDoText","ctx","useContext","ToDoContext","onSubmit","e","preventDefault","nanoid","htmlFor","inputId","autoFocus","autoCorrect","autoCapitalize","autoComplete","placeholder","value","target","disabled","length","className","AppWrapper","Header","h1","countOpenToDos","reduce","prev","current","App","headerText","Fragment","initialState","reducer","state","action","filter","Error","Provider","useReducer","dispatcher","children","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a5eca9f0.chunk.js","sourcesContent":["export const closeButtonSize = 24;\nexport const textGutter = 10;\nexport const vGutter = '2vh';\nexport const transition = 'all .3s ease-in-out';","import styled from \"@emotion/styled\";\nimport { textGutter } from \"./styles/variables\";\n\nconst Text = styled.span`\n  display: inline-block;\n  font-size: 1.6rem;\n  margin-left: ${textGutter}px;\n  ${(props: { isDone: boolean }) =>\n    props.isDone ? \"text-decoration: line-through\" : \"\"}\n`;\n\nexport default Text;\n","export const vGutterFromScreen = '4vh';\nexport const formHeight = '4.8rem';\nexport const boxPadding = '3vw';\n\nexport const breakpoints = {\n    sm: '640px'\n};","import { boxPadding } from './variables';\n\nexport const wrapper = () => `\n    max-width: 640px;\n    width: 100%;\n    align-self: center;\n    margin-left: 1.6rem;\n    margin-right: 1.6rem;\n`; \n\nexport const box = () => `\n    display: flex;\n    background: #fff;\n    padding-left: ${boxPadding};\n    padding-right: ${boxPadding};\n    border-radius: 8px;\n    box-shadow: 1px 1px 4px rgb(116 128 148 / 2%), \n    0px 1px 2px rgb(116 128 148 / 4%), \n    0px 0px 4px rgb(116 128 148 / 8%), \n    0px 0px 4px rgb(116 128 148 / 8%);\n`;\n\nexport const formElementsBase = () => `\n    display: block;\n    font-family: inherit;\n    border-radius: 0.4rem;\n    transition: all 0.3s ease-in-out;\n\n    &:focus {\n        outline: 0;\n    }\n\n`;","import styled from \"@emotion/styled\";\nimport { vGutterFromScreen } from \"../../styles/variables\";\nimport { box, wrapper } from \"../../styles/mixins\";\nimport { breakpoints, boxPadding } from \"../../styles/variables\";\n\nconst List = styled.ul`\n  flex-direction: column;\n  padding-top: ${boxPadding};\n  padding-bottom: ${boxPadding};\n  margin-bottom: ${vGutterFromScreen};\n  overflow: auto;\n  ${box()}\n  ${wrapper()}\n\n    @media (max-width: ${parseInt(breakpoints.sm, 10) - 1 + \"px\"}) {\n    margin: 0;\n    border-radius: 0;\n  }\n`;\n\nexport default List;\n","import styled from '@emotion/styled';\nimport { vGutter, textGutter, closeButtonSize } from \"./styles/variables\";\n\nconst ListItem = styled.li`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    position: relative;\n    border-bottom: 1px solid rgba(0, 0, 0, .2);\n    padding-bottom: ${vGutter};\n    padding-right: ${closeButtonSize + textGutter}px;\n    margin-bottom: ${vGutter};\n    \n    &:last-of-type {\n        margin-bottom: 0;\n        border-bottom: 0;\n        padding-bottom: 0;\n    }\n`;\n\nexport default ListItem;","import styled from '@emotion/styled';\nimport { closeButtonSize, transition } from \"./styles/variables\";\n\nexport const innerBorder = '0 0 0 1px rgba(0, 0, 0, .4) inset';\n\nconst CloseButton = styled.button`\n    position: absolute;\n    right: 0;\n    border: 0;\n    padding: 0;\n    width: ${closeButtonSize}px;\n    height: ${closeButtonSize}px;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    color: #F9EBEA;\n    background-color: #B03A2E;\n    border-radius: 100%;\n    box-shadow: ${innerBorder};\n    cursor: pointer;\n    transition: ${transition};\n    \n    &:focus,\n    &:hover {\n        outline: 0;\n        box-shadow: ${innerBorder}, 0 0 6px rgb(146, 43, 33, .6);\n    }\n    \n`;\n\nexport default CloseButton;","import styled from \"@emotion/styled\";\nimport { closeButtonSize, transition } from \"./styles/variables\";\n\nconst CustomCheckbox = styled.label`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n\n  &,\n  > * {\n    cursor: pointer;\n  }\n\n  > div {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    width: ${closeButtonSize}px;\n    height: ${closeButtonSize}px;\n    border: 1px solid rgb(144, 148, 151);\n    background: rgb(202, 207, 210);\n    border-radius: 0.4rem;\n    position: relative;\n\n    > input[type=\"checkbox\"] {\n      opacity: 0;\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      padding: 0;\n    }\n\n    > span {\n      color: #239b56;\n      font-size: 20px;\n      transition: ${transition};\n      transform-origin: center;\n      opacity: 0;\n      transform: scale(0);\n    }\n\n    > input[type=\"checkbox\"]:checked + span {\n      opacity: 1;\n      transform: scale(1);\n    }\n  }\n`;\n\nexport default CustomCheckbox;\n","import styled from '@emotion/styled';\n\ninterface CrossIconProps {\n    size?: 'big' | 'small';\n    rotated?: boolean;\n};\n\nconst CrossIcon = (props: CrossIconProps) => {\n    const size = props.size === 'big' ? '28px' : '10px';\n\n    const StyledCrossIcon = styled.i`\n        display: inline-block;\n        width: ${size};\n        height: ${size};\n        color: inherit;\n        transform-origin: center center;\n        ${props.rotated ? 'transform: rotate(-225deg);' : ''}\n\n        &:before,\n        &:after {\n            content: '';\n            background: currentColor;\n            position: absolute;\n            transform-origin: center center;\n        }\n\n        &:after {\n            width: 2px;\n            height: 100%;\n            left: 50%;\n            margin-left: -1px;\n        }\n\n        &:before {\n            width: 100%;\n            height: 2px;\n            left: 0;\n            top: 50%;\n            margin-top: -1px;\n        }\n    `;\n\n    return <StyledCrossIcon />\n\n}\n\nexport default CrossIcon;","import { FC } from \"react\";\nimport ToDo from \"../../ToDo.model\";\nimport Text from \"./Text\";\nimport List from \"./List\";\nimport ListItem from \"./ListItem\";\nimport CloseButton from \"./CloseButton\";\nimport CustomCheckbox from \"./CustomCheckbox\";\nimport CrossIcon from \"../CrossIcon\";\n\ninterface ToDoListProps {\n  items: ToDo[];\n  onDeleteTodo: (id: string) => void;\n  onToggleDone: (id: string) => void;\n}\n\nconst ToDoList: FC<ToDoListProps> = (props) => {\n  return (\n    <List>\n      {props.items.map((todo) => {\n        return (\n          <ListItem key={todo.id}>\n            <CustomCheckbox>\n              <div>\n                <input\n                  type=\"checkbox\"\n                  onChange={() => {\n                    props.onToggleDone(todo.id);\n                  }}\n                />\n                <span>✔</span>\n              </div>\n              <Text isDone={todo.isDone}>{todo.text}</Text>\n            </CustomCheckbox>\n            <CloseButton\n              type=\"button\"\n              onClick={() => {\n                props.onDeleteTodo(todo.id);\n              }}\n            >\n              <CrossIcon rotated size=\"small\" />\n            </CloseButton>\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n};\n\nexport default ToDoList;\n","import styled from '@emotion/styled';\nimport { box, wrapper } from '../../styles/mixins';\nimport { vGutterFromScreen, breakpoints } from '../../styles/variables';\n\nconst Form = styled.form`\n    padding-top: 3vh;\n    padding-bottom: 3vh;\n    flex-wrap: wrap;\n    flex: 0 0 auto;\n    flex-direction: column;\n    ${box()}\n    ${wrapper()}\n\n    @media (min-width: ${breakpoints.sm}) {\n        margin-top: ${vGutterFromScreen};\n        padding-top: 6vh;\n        padding-bottom: 6vh;\n    }\n\n    @media (max-width: ${parseInt(breakpoints.sm, 10) - 1 + 'px'}) {\n        border-radius: 0;\n        margin-right: 0;\n        margin-left: 0;\n    }\n`;\n\nexport default Form;","import styled from '@emotion/styled';\n\nconst Label = styled.label`\n    margin-bottom: 0.4rem;\n    font-weight: bold;\n    font-size: 2rem;\n    cursor: pointer;\n`;\n\nexport default Label;","import styled from '@emotion/styled';\nimport { formElementsBase } from '../../styles/mixins';\n\nconst Button = styled.button`\n    ${formElementsBase()}\n    font-weight: bold;\n    width: 100%;\n    height: 100%;\n    color: #fff;\n    cursor: pointer;\n    text-shadow: 1px 1px rgba(0, 0, 0, 0.2);\n    background: rgb(125,60,152);\n    background: linear-gradient(0deg, rgba(125,60,152,1) 0%, rgba(165,105,189,1) 100%);\n    border: 0;\n    padding: 0;\n    left: 0;\n\n    &:hover,\n    &:focus {\n        text-shadow: -1px -1px rgba(0, 0, 0, 0.2);\n        background: rgba(165, 105, 189, 1);\n        background: linear-gradient(0deg, rgba(165, 105, 189, 1) 0%, rgba(125, 60, 152, 1) 100%);\n    }\n\n    &[disabled] {\n        left: 100%;\n        opacity: 0;\n    }\n\n    > i {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        margin: -14px 0 0 -14px;\n    }\n`;\n\nexport default Button;","import styled from '@emotion/styled';\nimport { formElementsBase } from '../../styles/mixins';\nimport { formHeight } from '../../styles/variables';\n\nconst Input = styled.input`\n    ${formElementsBase()}\n    width: 100%;\n    height: 100%;\n    background: #fff;\n    color: inherit;\n    border: 2px solid rgba(165, 105, 189, 1);\n    font-size: 1.8rem;\n    padding: 0.6rem ${formHeight} 0.6rem 1.6rem;\n\n    &:hover,\n    &:focus {\n        border-color: rgb(125, 60, 152);\n        box-shadow: 0 0 0.4rem rgba(165, 105, 189, 1);\n    }\n\n`;\n\nexport default Input;","import styled from '@emotion/styled';\nimport { formHeight } from \"../../styles/variables\";\n\nconst InputWrapper = styled.div`\n    height: ${formHeight};\n`;\n\nexport default InputWrapper;","import styled from '@emotion/styled';\nimport { formHeight } from '../../styles/variables';\n\nconst offset = '6px';\nconst size = `${formHeight} - ${parseInt(offset, 10) * 2 + 'px'}`;\n\nconst ButtonWrapper = styled.div`\n    position: absolute;\n    right: ${offset};\n    top: ${offset};\n    width: calc(${size});\n    height: calc(${size});\n    overflow: hidden;\n`;\n\nexport default ButtonWrapper;","import { createContext } from \"react\";\nimport ToDo from \"../ToDo.model\";\n\ninterface ToDoContext {\n  todos: ToDo[];\n  add: (item: ToDo) => void;\n  delete: (id: string) => void;\n  toggle: (id: string) => void;\n}\n\nexport default createContext<ToDoContext>({\n  todos: [],\n  add: (item: ToDo) => {},\n  delete: (id: string) => {},\n  toggle: (id: string) => {},\n});\n","import React, { useState, useContext } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport Form from \"./Form\";\nimport Label from \"./Label\";\nimport Button from \"./Button\";\nimport Input from \"./Input\";\nimport InputWrapper from \"./InputWrapper\";\nimport ButtonWrapper from \"./ButtonWrapper\";\nimport CrossIcon from \"../CrossIcon\";\nimport ToDoContext from \"../../store/context\";\n\ninterface AddToDoProps {\n  inputId: string;\n  placeholder: string;\n}\n\nconst AddToDo: React.FC<AddToDoProps> = (props) => {\n  const [toDoText, setToDoText] = useState(\"\");\n  const ctx = useContext(ToDoContext);\n\n  const submitHandler = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (toDoText) {\n      ctx.add({ id: nanoid(), text: toDoText, isDone: false });\n      setToDoText(\"\");\n    }\n  };\n\n  return (\n    <Form onSubmit={submitHandler}>\n      <Label htmlFor={props.inputId}>Add some new task</Label>\n\n      <InputWrapper>\n        <Input\n          type=\"text\"\n          id={props.inputId}\n          autoFocus\n          autoCorrect=\"off\"\n          autoCapitalize=\"off\"\n          autoComplete=\"off\"\n          placeholder={props.placeholder}\n          value={toDoText}\n          onChange={(e) => setToDoText(e.target.value)}\n        />\n\n        <ButtonWrapper>\n          <Button type=\"submit\" disabled={!toDoText.length}>\n            <CrossIcon size=\"big\" />\n            <span className=\"sr-only\">Add ToDo!</span>\n          </Button>\n        </ButtonWrapper>\n      </InputWrapper>\n    </Form>\n  );\n};\n\nexport default AddToDo;\n","import styled from \"@emotion/styled\";\n\nconst AppWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  background: #F2F4F4;\n`;\n\nexport default AppWrapper;","import styled from \"@emotion/styled\";\nimport { wrapper } from \"../styles/mixins\";\nimport { breakpoints, boxPadding } from \"../styles/variables\";\n\nconst Header = styled.h1`\n  font-size: 2.6rem;\n  margin: 4vh 0 2vh 0;\n  flex: 0 0 auto;\n  ${wrapper()}\n\n  @media (max-width: ${parseInt(breakpoints.sm, 10) - 1 + 'px'}) {\n    margin-right: 0;\n    margin-left: 0;\n    padding-left: ${boxPadding};\n    padding-right: ${boxPadding};\n  }\n\n`;\n\nexport default Header;","import ToDo from \"../ToDo.model\";\n\nconst countOpenToDos = (todos: ToDo[]) => {\n  return todos.reduce((prev, current) => {\n    if (!current.isDone) {\n      return prev + 1;\n    }\n\n    return prev;\n  }, 0);\n};\n\nexport default countOpenToDos;\n","import React, { useContext } from \"react\";\nimport ToDoList from \"./components/ToDoList/ToDoList\";\nimport AddToDo from \"./components/AddToDo/AddToDo\";\nimport ToDoContext from \"./store/context\";\nimport AppWrapper from \"./components/AppWrapper\";\nimport Header from \"./components/Header\";\nimport countOpenToDos from \"./utils/count-open-todos\";\n\nconst App: React.FC = () => {\n  const ctx = useContext(ToDoContext);\n  const headerText =\n    countOpenToDos(ctx.todos) === 0\n      ? \"Everything's done!\"\n      : `Things to do (${countOpenToDos(ctx.todos)}):`;\n\n  return (\n    <AppWrapper>\n      <AddToDo inputId=\"todo-input\" placeholder=\"Start typing to add a ToDo\" />\n      {ctx.todos.length ? (\n        <React.Fragment>\n          <Header>{headerText}</Header>\n          <ToDoList\n            items={ctx.todos}\n            onDeleteTodo={ctx.delete}\n            onToggleDone={ctx.toggle}\n          />\n        </React.Fragment>\n      ) : null}\n    </AppWrapper>\n  );\n};\n\nexport default App;\n","import ToDo from \"../ToDo.model\";\nimport TodoActionType from \"./ToDoAction.type\";\n\nexport interface State {\n  todos: ToDo[];\n}\n\ninterface Action {\n  type: TodoActionType;\n}\n\ninterface AddAction extends Action {\n  type: \"ADD\";\n  todo: ToDo;\n}\n\ninterface DeleteAction extends Action {\n  type: \"DELETE\";\n  id: string;\n}\n\ninterface ToggleDoneAction extends Action {\n  type: \"TOGGLE_DONE\";\n  id: string;\n}\n\nexport type ActionType = AddAction | DeleteAction | ToggleDoneAction;\n\nexport const initialState = {\n  todos: [],\n} as State;\n\nconst reducer = (state: State, action: ActionType): State => {\n  switch (action.type) {\n    case \"ADD\":\n      return { todos: [action.todo, ...state.todos] };\n    case \"DELETE\":\n      return { todos: state.todos.filter((todo) => todo.id !== action.id) };\n    case \"TOGGLE_DONE\":\n      return {\n        todos: state.todos.map((todo) => {\n          if (todo.id !== action.id) {\n            return todo;\n          }\n\n          return {\n            id: todo.id,\n            text: todo.text,\n            isDone: !todo.isDone,\n          };\n        }),\n      };\n    default:\n      throw new Error(`Unknown action type: ${(action as ActionType).type}`);\n  }\n};\n\nexport default reducer;\n","import { useReducer, FC } from \"react\";\nimport Context from \"./context\";\nimport reducer, { initialState } from \"./reducer\";\n\nconst Provider: FC = (props) => {\n  const [state, dispatcher] = useReducer(reducer, initialState);\n\n  return (\n    <Context.Provider\n      value={{\n        todos: state.todos,\n        add: (todo) => dispatcher({ type: \"ADD\", todo }),\n        delete: (id) => dispatcher({ type: \"DELETE\", id }),\n        toggle: (id) => dispatcher({ type: \"TOGGLE_DONE\", id }),\n      }}\n    >\n      {props.children}\n    </Context.Provider>\n  );\n};\n\nexport default Provider;\n","import ReactDOM from \"react-dom\";\nimport \"./styles/global.css\";\nimport App from \"./App\";\nimport Provider from \"./store/Provider\";\n\nReactDOM.render(\n  <Provider>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}